labs(title = "",
subtitle = "Gamma Mixed Effects")
# caption = expression(paste("Significance: ***", italic("p"), "<.001, **", italic("p"), "<.001, *", italic("p"), "<.05")))
pg.s = pg.s + ylim(.85, 1.15) +
scale_y_continuous(name="Rate Ratios") +
geom_hline(yintercept =1, linetype=3) +
theme_bw() +
theme(plot.title=element_text(size=16,face="bold"), # theme_light()
# axis.text.y=element_text(size=12),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x=element_text(face="bold"),
axis.title=element_text(size=12,face="bold"),
# plot.caption = element_text(hjust = 0),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))
pg.s
library(patchwork)
alignPlotSyn = pz.s + pg.s
alignPlotSyn
# alignPlotSyn + plot_annotation(tag_levels = 'A')
ggsave(filename = "syntactic_forest.png", width = 8, height = 4.5, dpi = 300, units = "in", device='png')
save.image(file = "syntactic.RData")
# alignPlotMaster = alignPlotLex / alignPlotSyn
# alignPlotMaster
# #Need to prep the input tables.
# gdf = data.frame(model_parameters(g1.glmer2, exponentiate = T)) %>% select(-t) %>% mutate(Model="Gamma Mixed Effects")
# zdf = data.frame(model_parameters(z1.glmer2, exponentiate = T)) %>% select(-z) %>% mutate(Model="Binomial Logistic Mixed Effects")
# df.lex = rbind(zdf, gdf)
#
# df.lex2 = df.lex %>% mutate_if(is.numeric, round, digits = 3) %>%
#   mutate(Group = case_when(Parameter == "ordering_prop" | Parameter == "Block.l.L" ~
#                 "Main Predictors",
#                 TRUE ~ "Covariates"),
#          p.vales = ifelse(p < .001, "***",
#                    ifelse(p < .01 & p >= .001, "**",
#                    ifelse(p < .05 & p >= .01, "*", "")))) %>%
#   ## just get parameters and columns that are needed
#   filter(Effects == "fixed" &  Parameter != "Block.l.Q" & Parameter != "(Intercept)") %>%
#   select(Parameter, Coefficient, CI_low, CI_high, Group, Model, p.vales) %>%
# ## reorder parameters
#   group_by(Model) %>%
#   mutate(Parameter=factor(Parameter)) %>%
#   group_by(Model) %>%
#   mutate(Parameter=fct_relevel(Parameter,c("ConceptPoT", "aligner_rolecontroller", "utterlen_alignerZ", "relative_start_timeZ", "level_durationZ", "Block.l.L", "ordering_prop"))) %>%
#   arrange(Parameter) %>%
#   ungroup()
#
# df.lex2$Parameter = recode_factor(df.lex2$Parameter, "ConceptPoT" = "Concept [PoT]", "aligner_rolecontroller"="Role [controller]", "utterlen_alignerZ"="Utterance length", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "Block.l.L"="Block (linear trend)", "ordering_prop"="Utterance order")
# # https://datascienceplus.com/lattice-like-forest-plot-using-ggplot2-in-r/
# # https://billobrien.wordpress.com/2018/04/05/__trashed/
# # https://stackoverflow.com/questions/62246541/forest-plot-with-table-ggplot-coding
#
# forest_indiv <- function(form_df, wrapit=FALSE) {
#
#     plot1 = ggplot(data=form_df,
#     aes(x = Parameter,y = Coefficient, ymin = CI_low, ymax = CI_high))+
#     # geom_point(size=3, shape=19)+ # use only if not going to use color
#     geom_pointrange(aes(col=Group), show.legend = FALSE)+ ## this is good, but creates a legend
#     geom_hline(aes(fill=Parameter), yintercept =1, linetype=3)+
#     xlab('Parameter') + ylab("95% Confidence Interval")+
#     geom_errorbar(aes(ymin=CI_low, ymax=CI_high,col=Group), show.legend = FALSE, width=0,cex=.5)+
#     geom_text(aes(x = Parameter, label =  paste0(Coefficient, p.vales)), nudge_x = .35) + #size=3
#     coord_flip() +
#
#     theme(plot.title=element_text(size=16,face="bold"),
#         axis.text.y=element_text(size=12),
#         axis.ticks.y=element_blank(),
#         axis.text.x=element_text(face="bold"),
#         axis.title=element_text(size=12,face="bold"),
#         strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))+
#
#     if (wrapit == TRUE) {
#       facet_grid(~Model,scales = "free",switch="y")
#     }
#     return(plot1)
# }
# p1.1 = forest_indiv(filter(df.lex2, Model=="Binomial Logistic Mixed Effects")) + ggtitle("syntax\nBinomial Logistic Mixed Effects") + ylim(.5, 2.5)
# p1.1
# p1.2 = forest_indiv(filter(df.lex2, Model=="Gamma Mixed Effects")) + ggtitle("syntax\nGamma Mixed Effects") +
#   theme(axis.text.y=element_blank(),
#         axis.title.y=element_blank()) +
#   ylim(.85, 1.15)
# p1.2
# # p3 = forest_indiv(df.lex2, wrapit=TRUE); p3
# p1.1 + p1.2
# tab_model(zigamma_lex, zigamma_syn2nd,
#           show.ci = 0.95, #FALSE
#           rm.terms = c("Block.l.Q"),
#           pred.labels = c("ordering_prop"="Utterance order", "Block.l.L"="Block (linear trend)", "BlockExpBlock2"="Block 2 (vs Warmup)", "aligner_rolecontroller"="Role [controller]", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "utterlen_alignerZ"="Utterance length", "ConceptPoT" = "Concept [PoT]", "Revisited_birevisit" = "Revisit [yes]", "XQ_know"="Familiarity [yes]", "femdomin"="Majority Female [yes]"),
#           # title = "",
#           digits = 3,
#           digits.re = 3,
#           dv.labels = c("syntax", "Syntactic"),
#           show.re.var = TRUE,
#           use.viewer = TRUE)
# zigamma_lex2 <- glmmTMB(syntax ~ ordering_prop + Block.l + aligner_role + relative_start_timeZ + level_durationZ + utterlen_alignerZ + Concept + (aligner_role|subject_id),
#                          family = ziGamma(link = "log"),
#                          ziformula = ~ ordering_prop + Block.l + aligner_role + relative_start_timeZ + level_durationZ + utterlen_alignerZ + Concept + (aligner_role|subject_id),
#                          data = main.data.20)
?lrtest
model_parameters(z1.glmer2, exponentiate = F, digits=3)
(1-(exp(-0.056))) * 100
model_parameters(g1.glmer2, exponentiate = F, digits=3)
# VarCorr(g1.glmer2)
(1-(exp(-0.081))) * 100
load("/Users/nickduran/Desktop/GitProjects/CPS-ling-align/R_RMD_Analysis/lexical.RData")
knitr::opts_chunk$set(echo = TRUE)
# rm(list=setdiff(ls(), "alignPlotLex", "alignPlotSyn"))
# rm(list=ls())
library(tidyverse)
library(pander)
# library(glmmTMB) ## no longer using
library(lme4) ## for glmer
library(strengejacke) ## for tab_model and plot_model
library(parameters)
library(lmtest) ## for lrtest
library(bbmle) ## for AICtab
# Method 1: AICtab
AICtab(z1.glm2,z1.glmer2,logLik=TRUE)
#Method 2: lrtest
lrtest(z1.glm2,z1.glmer2)
load("/Users/nickduran/Desktop/GitProjects/CPS-ling-align/R_RMD_Analysis/lexical.RData")
knitr::opts_chunk$set(echo = TRUE)
# rm(list=setdiff(ls(), "alignPlotLex", "alignPlotSyn"))
# rm(list=ls())
library(tidyverse)
library(pander)
# library(glmmTMB) ## no longer using
library(lme4) ## for glmer
library(strengejacke) ## for tab_model and plot_model
library(parameters)
library(lmtest) ## for lrtest
library(bbmle) ## for AICtab
# Method 1: AICtab
AICtab(z1.glm2,z1.glmer2,logLik=TRUE)
#Method 2: lrtest : CANNOT DO THIS BECAUSE TWO DIFFERENT MODEL CLASSES!
# Method 1: AICtab
AICtab(g1.glm2,g1.glmer2,logLik=TRUE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("/Users/nickduran/Desktop/GitProjects/CPS-ling-align/R_RMD_Analysis/syntactic.RData")
library(tidyverse)
library(pander)
# library(glmmTMB) ## no longer using
library(lme4) ## for tab_model and plot_model
library(strengejacke) ## for tab_model
library(parameters)
library(lmtest) ## for lrtest
library(bbmle) ## for AICtab
# Method 1: AICtab
AICtab(z1.glm2,z1.glmer2,logLik=TRUE)
# Method 1: AICtab
AICtab(g1.glm2,g1.glmer2,logLik=TRUE)
knitr::opts_chunk$set(echo = TRUE)
# rm(list=ls())
library(tidyverse)
library(pander)
main.data = read.csv("../Data/Step1_PrepareFeatures.csv")
# test1 = main.data %>%
#   group_by(Team, School, Block, Level, revisited) %>%
#   filter(n() >= 20) %>%
#   ungroup()
#
# ## remove extraordinarily long single utterances (removes 282 rows, or (282/34294)*100, or less than 1%)
# ## why 71? Because this is 5SDs above mean of utterlen: mean(main.data$utterlen_aligner)+(5*sd(main.data$utterlen_aligner))
# test2 = test1 %>% filter(utterlen_aligner < 71 & utterlen_target < 71)
source("../R_Helper/Step3_helper.R")
main.data.20 = variable_prep(main.data)
pander(names(main.data.20))
# head(main.data.20)
library(lme4) ## for lmer
library(parameters)
library(strengejacke) ## for tab_model and plot_model
library(parameters)
library(lmtest) ## for lrtest
library(bbmle) ## for AICtab
lmer_sem1 = lmer(semantic ~ ordering_prop + Block.l + aligner_role + relative_start_timeZ + level_durationZ + utterlen_alignerZ + Concept + (1|subject_id), main.data.20, control=lmerControl(optimizer="bobyqa"));
lmer_sem2 = lmer(semantic ~ ordering_prop + Block.l + aligner_role + relative_start_timeZ + level_durationZ + utterlen_alignerZ + Concept + (aligner_role|subject_id), main.data.20, control=lmerControl(optimizer="bobyqa"));
# Method 1: AICtab
AICtab(lmer_sem1,lmer_sem2,logLik=TRUE)
#Method 2: lrtest
lrtest(lmer_sem1,lmer_sem2)
# Method 3: by hand
# logLik(lmer_sem1)
# logLik(lmer_sem2)
# G2 = -2 * logLik(lmer_sem1) + 2 * logLik(lmer_sem2)
# pchisq(as.numeric(G2), df=1, lower.tail=F)
summary(lmer_sem2)
lm2 <- lm(semantic ~ ordering_prop + Block.l + aligner_role + relative_start_timeZ + level_durationZ + utterlen_alignerZ + Concept, data = main.data.20)
# Method 1: AICtab
AICtab(lm2,lmer_sem2,logLik=TRUE)
performance::icc(lmer_sem2)
## does not converge when examining within role
lmer_sem1.null = lmer(semantic ~ 1 + (1|subject_id), main.data.20, control=lmerControl(optimizer="bobyqa"));
# Method 1: AICtab
AICtab(lmer_sem1.null,lmer_sem1,logLik=TRUE)
#Method 2: lrtest
lrtest(lmer_sem1.null,lmer_sem1)
model_parameters(lmer_sem2, digits=3)
# model_parameters(lmer_sem1, exponentiate=T, digits=3)
# VarCorr(g1.glmer2)
# pz.s = plot_model(lmer_sem2, show.values = TRUE, value.offset = .4,
#                   group.terms = c(1,1,2,2,2,2,2),
#                   rm.terms = c("Block.l.Q"),
#                   axis.labels = c("ordering_prop"="Utterance order", "Block.l.L"="Block (linear trend)", "aligner_rolecontroller"="Role [controller]", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "utterlen_alignerZ"="Utterance length", "ConceptPoT" = "Concept [PoT]"),
#                   # title=c("syntax Alignment"),
#                   digits = 3) +
#                   labs(title = "Semantic Alignment",
#                   subtitle = "Linear Mixed Effects")
#
# pz.s = pz.s + ylim(-0.1, 0.1) +
# # pz.s = pz.s +
#   geom_hline(yintercept=0, linetype=3) +
#   theme_bw() +
#   theme(
#         plot.title=element_text(size=16,face="bold"), # theme_light()
#         axis.text.y=element_text(size=12),
#         axis.ticks.y=element_blank(),
#         axis.text.x=element_text(face="bold"),
#         axis.title=element_text(size=12,face="bold"),
#         strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"))
# pz.s
tab_model(lmer_sem,
show.ci = 0.95, #FALSE
rm.terms = c("Block.l.Q"),
show.intercept = FALSE,
pred.labels = c("ordering_prop"="Utterance order", "Block.l.L"="Block (linear trend)", "BlockExpBlock2"="Block 2 (vs Warmup)", "aligner_rolecontroller"="Role [controller]", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "utterlen_alignerZ"="Utterance length", "ConceptPoT" = "Concept [PoT]", "Revisited_birevisit" = "Revisit [yes]", "XQ_know"="Familiarity [yes]", "femdomin"="Majority Female [yes]"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Semantic"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(lmer_sem2,
show.ci = 0.95, #FALSE
rm.terms = c("Block.l.Q"),
show.intercept = FALSE,
pred.labels = c("ordering_prop"="Utterance order", "Block.l.L"="Block (linear trend)", "BlockExpBlock2"="Block 2 (vs Warmup)", "aligner_rolecontroller"="Role [controller]", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "utterlen_alignerZ"="Utterance length", "ConceptPoT" = "Concept [PoT]", "Revisited_birevisit" = "Revisit [yes]", "XQ_know"="Familiarity [yes]", "femdomin"="Majority Female [yes]"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Semantic"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
mod1 = plot_model(lmer_sem2, type = "eff", terms = c("ordering_prop"))
mod1 + labs(title="Semantic Alignment",
x ="Ordering", y = "Cosine")
# save_plot("semantic_time.png")
mod1 = plot_model(lmer_sem2, type = "eff", terms = c("ordering_prop"))
mod1 + labs(title="Semantic Alignment",
x ="Ordering", y = "Cosine")
save_plot("semantic_time.png")
save.image(file = "semantic.RData")
summary(lmer_sem2)
summary(lmer_sem2)
summary(lmer_sem1.null)
lmer_sem1.null = lmer(semantic ~ 1 + (aligner_role|subject_id), main.data.20, control=lmerControl(optimizer="bobyqa"));
summary(lmer_sem1.null)
?isSingular
# Method 1: AICtab
AICtab(lmer_sem1.null,lmer_sem1,logLik=TRUE)
# Method 1: AICtab
AICtab(lmer_sem1.null,lmer_sem1,logLik=TRUE)
#Method 2: lrtest
lrtest(lmer_sem1.null,lmer_sem1)
tab_model(lmer_sem2,
show.ci = 0.95, #FALSE
rm.terms = c("Block.l.Q"),
show.intercept = FALSE,
pred.labels = c("ordering_prop"="Utterance order", "Block.l.L"="Block (linear trend)", "BlockExpBlock2"="Block 2 (vs Warmup)", "aligner_rolecontroller"="Role [controller]", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "utterlen_alignerZ"="Utterance length", "ConceptPoT" = "Concept [PoT]", "Revisited_birevisit" = "Revisit [yes]", "XQ_know"="Familiarity [yes]", "femdomin"="Majority Female [yes]"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Semantic"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
test1
test1 = main.data.20 %>% group_by(aligner_role) %>% summarise(mean(semantic))
test1
test1 = main.data.20 %>% group_by(aligner_role) %>% summarise(semantic, mean)
test1 = main.data.20 %>% group_by(aligner_role) %>% summarise(semantic, mean())
main.data.20 %>%
group_by(aligner_role) %>%
summarise(mean_size = mean(semantic))
main.data.20 %>%
group_by(aligner_role) %>%
summarise(mean_size = mean(semantic, na.rm = TRUE))
knitr::opts_chunk$set(fig.path='Figs/',
warning=FALSE, message=FALSE, error=FALSE)
library(tidyverse)
library(pander)
rm(list=ls())
main.data = read.csv("../Data/Step1_PrepareFeatures.csv")
source("../R_Helper/Step3_helper.R")
main.data.20 = variable_prep(main.data)
pander(names(main.data.20))
# head(main.data.20)
library(ordinal)
library(parameters)
library(strengejacke)
main.data.20$trophyNum <- ifelse(main.data.20$trophy == "none", 1,
ifelse(main.data.20$trophy == "silver" | main.data.20$trophy == "trophy", 2,
ifelse(main.data.20$trophy == "gold", 3, NA)))
# main.data.20$trophyBin <- ifelse(main.data.20$trophyNum > 0, 1, 0)
# main.data.20$trophyGoldOrSilver <- ifelse(main.data.20$trophy == "gold", 1, ifelse(main.data.20$trophy == "silver", 0, NA))
clmm_lex <- clmm(as.factor(trophyNum) ~ center(lexical)*center(ordering_prop) +
level_durationZ + relative_start_timeZ + revisited + Concept + Block.l +
(1|team_id), data = main.data.20, link = "logit", threshold="flexible")
# pander(summary(clmm_lex))
# tab_model(clmm_lex)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = TRUE,
use.viewer = TRUE)
tab_model(clmm_lex,
rm.terms = c("2|3"),
show.ci = 0.95, #FALSE
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = TRUE,
use.viewer = TRUE)
tab_model(clmm_lex,
# rm.terms = c("2|3"),
show.ci = 0.95, #FALSE
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
# rm.terms = c("2|3"),
show.ci = 0.95, #FALSE
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
# rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
order.terms = c(3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]", "center(lexical):center(ordering_prop)"="Lexical * Order"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "center(lexical):center(ordering_prop)"="Lexical * Order", "Block.l.L"="Block (linear trend)","ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "center(lexical):center(ordering_prop)"="Lexical * Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]"),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
clmm_lex <- clmm(as.factor(trophyNum) ~ center(lexical):center(ordering_prop) +
level_durationZ + relative_start_timeZ + revisited + Concept + Block.l +
(1|team_id), data = main.data.20, link = "logit", threshold="flexible")
# pander(summary(clmm_lex))
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "center(lexical):center(ordering_prop)"="Lexical * Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]"),
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
clmm_lex <- clmm(as.factor(trophyNum) ~ lexical + center(lexical):center(ordering_prop) +
level_durationZ + relative_start_timeZ + revisited + Concept + Block.l +
(1|team_id), data = main.data.20, link = "logit", threshold="flexible")
# pander(summary(clmm_lex))
tab_model(clmm_lex,
show.ci = 0.95, #FALSE
rm.terms = c("0|1", "1|2", "2|3", "Block.l.Q"),
pred.labels = c("center(lexical)"="Lexical", "center(ordering_prop)"="Utterance Order", "center(lexical):center(ordering_prop)"="Lexical * Order", "Block.l.L"="Block (linear trend)", "relative_start_timeZ"="Level start time", "level_durationZ"="Level duration", "ConceptPoT" = "Concept [PoT]", "revisitedreattempt" = "Revisit [yes]"),
# order.terms = c(1, 2, 3, 4, 11, 5, 6, 7, 9, 8, 10),
# title = "",
digits = 3,
digits.re = 3,
dv.labels = c("Trophy"),
show.re.var = FALSE,
show.r2 = FALSE,
show.icc = FALSE,
show.ngroups = FALSE,
show.obs = FALSE,
use.viewer = TRUE)
## something to note with semantic is there are ~1700 rows/utterances that have NA values because one of the utterances must contain words not in the semantic space - does this get addressed anywhere in manuscript?
clmm_sem <- clmm(as.factor(trophyNum) ~ semantic + center(semantic):center(ordering_prop) +
level_durationZ + relative_start_timeZ + revisited + Concept + Block.l +
(1|team_id), data = main.data.20, link = "logit")
?tab_model
