library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgUtterace"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgUtterace"); lev_duration
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgUtterace"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgUtterace"); lev_duration
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgUtterace"); levBlotab2
lev_duration2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration2) <- c("Trophy", "Block", "AvgUtterace"); lev_duration2
test1 = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
# mutate(maxTurns = max(utter_order)+1) %>%
summarise_if(is.numeric, list(mean))
mean(test1$numberturns)
sd(test1$numberturns)
max(test1$numberturns)
View(df.20.more)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgNumTurns"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgDuration"); lev_duration
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgNumTurns"); levBlotab2
lev_duration2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration2) <- c("Trophy", "Block", "AvgDuration"); lev_duration2
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = df.20.more %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab2) <- c("Block", "AvgNumTurns"); test1
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = df.20.more %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(test1) <- c("Block", "AvgNumTurns"); test1
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = main.data %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(test1) <- c("Block", "AvgNumTurns"); test1
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = df.20.more %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(test1) <- c("Block", "AvgNumTurns"); test1
test1 = df.20.more %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(test1) <- c("Block", "AvgDuration", "turns"); test1
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = main.data %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(test1) <- c("Block", "AvgDuration", "turns"); test1
df.20.more = filter(main.data, numberturns >= rmTurns)
test1 = df.20.more %>% group_by(factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(test1) <- c("Block", "AvgDuration", "turns"); test1
View(df.20.more)
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgDuration", "AvgNumTurns"); levBlotab2
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "AvgDuration", "AvgNumTurns"); levBlotab2
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(vars(level_duration, numberturns, sd))
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(vars(level_duration, numberturns, mean))
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(vars(level_duration, numberturns, funs(mean())))
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(c("level_duration", "numberturns"), mean)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(c("level_duration", "numberturns"), mean, sd)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(c("level_duration", "numberturns"), c(mean, sd))
View(levBlotab2)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
mutate_at(c("level_duration", "numberturns"), list(mean, sd))
View(levBlotab2)
View(levBlotab2)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "AvgDuration", "AvgNumTurns"); levBlotab2
View(levBlotab2)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
summarize_at(c("level_duration", "numberturns"), list(mean, sd))
View(levBlotab2)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
summarize_at(c("level_duration", "numberturns"), list(mean, sd)); colnames(levBlotab2) <- c("Trophy", "Mduration", "SDduration", "Mturns", "SDturns"); levBlotab2
View(levBlotab2)
rmTurns = 20
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
633/1089
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
View(df.20.more)
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); print(overallturnswords)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgNumTurns"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgDuration"); lev_duration
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgDuration", "AvgNumTurns"); levBlotab2
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
View(df.20.more)
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarize_at(c("utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "SDturn", "Mutterlen", "SDutterlen"); overallturnswords
hist(df.20.more$utterlen_aligner)
hist(df.20.more$utterlen_aligner, n=50)
hist(df.20.more$utterlen_aligner, n=100)
hist(df.20.more$utterlen_aligner, n=200)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
# main.data = read_csv("align_block_splitlevel_bs.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
## how many levels after 20 turns
levels2 = filter(main.data, numberturns >= rmTurns) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgNumTurns"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgDuration"); lev_duration
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgDuration", "AvgNumTurns"); levBlotab2
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
## how many levels after 20 turns, also same data as models, removing extraordinarily long single utterances
levels2 = filter(main.data, numberturns >= rmTurns) %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "SDturn", "Mutterlen", "SDutterlen"); overallturnswords
hist(df.20.more$utterlen_aligner, n=200)
View(df.20.more)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "SDturn", "Mutterlen", "SDutterlen"); overallturnswords
hist(overallturnswords$utterlen_aligner, n=200)
overallturnswords$utterlen_aligner
View(overallturnswords)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
mutate_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "SDturn", "Mutterlen", "SDutterlen"); overallturnswords
View(overallturnswords)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
mutate_at(c("numberturns", "utterlen_aligner"), list(mean, sd))
View(overallturnswords)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mturn", "SDturn", "SDutterlen"); overallturnswords
View(overallturnswords)
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mutterlen", "SDturn", "SDutterlen"); overallturnswords
View(overallturnswords)
overallturnswords1 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mutterlen", "SDturn", "SDutterlen"); overallturnswords1
overallturnswords2 = df.20.more %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mutterlen", "SDturn", "SDutterlen"); overallturnswords2
View(overallturnswords1)
View(overallturnswords2)
levBlotab2 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
group_by(factor(trophy, levels=c("none", "silver", "gold"))) %>%
summarize_at(c("level_duration", "numberturns"), list(mean, sd)); colnames(levBlotab2) <- c("Trophy", "Mduration", "Mturns", "SDduration", "SDturns"); levBlotab2
