size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 865), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Level Duration",
title = "Duration",
# caption = "Error bars indicate standard deviations"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
# plot.caption = element_text(hjust = 0),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
p_value_one <- tibble(
x = c("Silver", "Silver", "Gold", "Gold"),
y = c(122, 127, 127, 122)
)
p_value_two <- tibble(
x = c("None", "None", "Silver", "Silver"),
y = c(137, 142, 142, 137)
)
fig2 = levBlotab2 %>%
ggplot(aes(trophy, numberturns_mean)) +
geom_col(aes(fill = trophy), color = "black", width = 0.85) +
geom_errorbar(aes(ymin = numberturns_mean - numberturns_sd,
ymax = numberturns_mean + numberturns_sd),
color = "#22292F",
width = .1) +
geom_line(data = p_value_one,
aes(x = x, y = y, group = 1)) +
geom_line(data = p_value_two,
aes(x = x, y = y, group = 1)) +
annotate("text", x = 2.5, y = 129,
label = "***",
size = 8, color = "#22292F") +
annotate("text", x = 1.5, y = 144,
label = "*",
size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 155), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Turns",
title = "Turns",
caption = "*p<.05, ***p<.001"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
plot.caption = element_text(size=12),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
fig2
library(patchwork)
durationPlots = fig1 + fig2
durationPlots
# ggsave(filename = "Figs/trophy_levels_time.png",width = 8, height = 4.5, dpi = 300, units = "in", device='png')
levBlotab3 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
dplyr::select(1:8, "numberturns") %>% unique()
library(lme4)
library(emmeans)
library(multcomp)
library(car)
levBlotab3 = levBlotab3 %>% mutate(TeamRE = paste0(Team, School))
a1 = lmer(level_duration ~ trophy + (1|TeamRE), levBlotab3); summary(a1); Anova(a1, type = 2)
a1.emm <- emmeans(a1, ~ trophy)
pairs(a1.emm, adjust = "none")
## same as above, but cleaner and can be used with lmer if desired
# a1 = aov(level_duration ~ trophy, levBlotab3); summary(a1)
# pairwise.t.test(levBlotab3$level_duration, levBlotab3$trophy, p.adj = "bonf")
a2 = lmer(numberturns ~ trophy + (1|TeamRE), levBlotab3); summary(a2); Anova(a2, type = 2)
a2.emm <- emmeans(a2, ~ trophy)
pairs(a2.emm, adjust = "none")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
df.20.more = filter(main.data, numberturns >= rmTurns)
## how many levels after 20 turns, also same data as models, removing extraordinarily long single utterances
levels2 = filter(main.data, numberturns >= rmTurns) %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
# overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
#   summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mutterlen", "SDturn", "SDutterlen"); overallturnswords
## how many trophies distributed across reduced levels
levtab2 = table(levels2$trophy);
levtab2
levBlotab2 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
group_by(trophy) %>%
summarize_at(c("level_duration", "numberturns"), list(mean = mean, sd = sd)) %>%
mutate(
trophy = case_when(
trophy == "none" ~ "None",
trophy == "silver" ~ "Silver",
trophy == "gold" ~ "Gold") %>%
as.factor %>%
fct_relevel("None", "Silver", "Gold")
)
p_value_one <- tibble(
x = c("None", "None", "Silver", "Silver"),
y = c(775, 800, 800, 775)
)
p_value_two <- tibble(
x = c("Silver", "Silver", "Gold", "Gold"),
y = c(625, 650, 650, 625)
)
fig1 = levBlotab2 %>%
ggplot(aes(trophy, level_duration_mean)) +
geom_col(aes(fill = trophy), color = "black", width = 0.85) +
geom_errorbar(aes(ymin = level_duration_mean - level_duration_sd,
ymax = level_duration_mean + level_duration_sd),
color = "#22292F",
width = .1) +
geom_line(data = p_value_one,
aes(x = x, y = y, group = 1)) +
geom_line(data = p_value_two,
aes(x = x, y = y, group = 1)) +
annotate("text", x = 1.5, y = 810,
label = "***",
size = 8, color = "#22292F") +
annotate("text", x = 2.5, y = 660,
label = "***",
size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 865), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Level Duration",
title = "Duration",
# caption = "Error bars indicate standard deviations"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
# plot.caption = element_text(hjust = 0),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
p_value_one <- tibble(
x = c("Silver", "Silver", "Gold", "Gold"),
y = c(122, 127, 127, 122)
)
p_value_two <- tibble(
x = c("None", "None", "Silver", "Silver"),
y = c(137, 142, 142, 137)
)
fig2 = levBlotab2 %>%
ggplot(aes(trophy, numberturns_mean)) +
geom_col(aes(fill = trophy), color = "black", width = 0.85) +
geom_errorbar(aes(ymin = numberturns_mean - numberturns_sd,
ymax = numberturns_mean + numberturns_sd),
color = "#22292F",
width = .1) +
geom_line(data = p_value_one,
aes(x = x, y = y, group = 1)) +
geom_line(data = p_value_two,
aes(x = x, y = y, group = 1)) +
annotate("text", x = 2.5, y = 129,
label = "***",
size = 8, color = "#22292F") +
annotate("text", x = 1.5, y = 144,
label = "*",
size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 155), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Turns",
title = "Turns",
caption = "*p<.05, ***p<.001"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
plot.caption = element_text(size=12),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
fig2
library(patchwork)
durationPlots = fig1 + fig2
durationPlots
# ggsave(filename = "Figs/trophy_levels_time.png",width = 8, height = 4.5, dpi = 300, units = "in", device='png')
levBlotab3 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
dplyr::select(1:8, "numberturns") %>% unique()
library(lme4)
library(emmeans)
library(multcomp)
library(car)
levBlotab3 = levBlotab3 %>% mutate(TeamRE = paste0(Team, School))
a1 = lmer(level_duration ~ trophy + (1|TeamRE), levBlotab3); summary(a1); Anova(a1, type = 2)
a1.emm <- emmeans(a1, ~ trophy)
pairs(a1.emm, adjust = "none")
## same as above, but cleaner and can be used with lmer if desired
# a1 = aov(level_duration ~ trophy, levBlotab3); summary(a1)
# pairwise.t.test(levBlotab3$level_duration, levBlotab3$trophy, p.adj = "bonf")
a2 = lmer(numberturns ~ trophy + (1|TeamRE), levBlotab3); summary(a2); Anova(a2, type = 2)
a2.emm <- emmeans(a2, ~ trophy)
pairs(a2.emm, adjust = "none")
rmTurns = 20
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
head(main.data)
## how many original levels
levels1 = main.data %>% dplyr::select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
main.data = read_csv("../Data/Step1_PrepareFeatures.csv", show_col_types = FALSE)
turns = main.data %>% group_by(Team, School, Block, Level, revisited) %>%
summarise(numberturns = n())
main.data = left_join(main.data, turns)
## how many original levels
levels1 = main.data %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels1)
rmTurns = 20
df.20.more = filter(main.data, numberturns >= rmTurns)
## how many levels after 20 turns, also same data as models, removing extraordinarily long single utterances
levels2 = filter(main.data, numberturns >= rmTurns) %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>% select(Team, School, Block, Level, revisited, trophy) %>% distinct(); nrow(levels2)
# overallturnswords = df.20.more %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
#   summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); overallturnswords
overallturnswords = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
summarize_at(c("numberturns", "utterlen_aligner"), list(mean, sd)); colnames(overallturnswords) <- c("Mturn", "Mutterlen", "SDturn", "SDutterlen"); overallturnswords
## how many trophies distributed across reduced levels
levtab2 = table(levels2$trophy);
levtab2
levBlotab2 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
group_by(trophy) %>%
summarize_at(c("level_duration", "numberturns"), list(mean = mean, sd = sd)) %>%
mutate(
trophy = case_when(
trophy == "none" ~ "None",
trophy == "silver" ~ "Silver",
trophy == "gold" ~ "Gold") %>%
as.factor %>%
fct_relevel("None", "Silver", "Gold")
)
p_value_one <- tibble(
x = c("None", "None", "Silver", "Silver"),
y = c(775, 800, 800, 775)
)
p_value_two <- tibble(
x = c("Silver", "Silver", "Gold", "Gold"),
y = c(625, 650, 650, 625)
)
fig1 = levBlotab2 %>%
ggplot(aes(trophy, level_duration_mean)) +
geom_col(aes(fill = trophy), color = "black", width = 0.85) +
geom_errorbar(aes(ymin = level_duration_mean - level_duration_sd,
ymax = level_duration_mean + level_duration_sd),
color = "#22292F",
width = .1) +
geom_line(data = p_value_one,
aes(x = x, y = y, group = 1)) +
geom_line(data = p_value_two,
aes(x = x, y = y, group = 1)) +
annotate("text", x = 1.5, y = 810,
label = "***",
size = 8, color = "#22292F") +
annotate("text", x = 2.5, y = 660,
label = "***",
size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 865), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Level Duration",
title = "Duration",
# caption = "Error bars indicate standard deviations"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
# plot.caption = element_text(hjust = 0),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
p_value_one <- tibble(
x = c("Silver", "Silver", "Gold", "Gold"),
y = c(122, 127, 127, 122)
)
p_value_two <- tibble(
x = c("None", "None", "Silver", "Silver"),
y = c(137, 142, 142, 137)
)
fig2 = levBlotab2 %>%
ggplot(aes(trophy, numberturns_mean)) +
geom_col(aes(fill = trophy), color = "black", width = 0.85) +
geom_errorbar(aes(ymin = numberturns_mean - numberturns_sd,
ymax = numberturns_mean + numberturns_sd),
color = "#22292F",
width = .1) +
geom_line(data = p_value_one,
aes(x = x, y = y, group = 1)) +
geom_line(data = p_value_two,
aes(x = x, y = y, group = 1)) +
annotate("text", x = 2.5, y = 129,
label = "***",
size = 8, color = "#22292F") +
annotate("text", x = 1.5, y = 144,
label = "*",
size = 8, color = "#22292F") +
scale_fill_grey(start = 0.3) +
scale_y_continuous(limits = c(0, 155), expand = c(0, 0)) +
guides(fill = "none") +
theme_minimal() +
labs(
x = "",
y = "Mean Turns",
title = "Turns",
caption = "*p<.05, ***p<.001"
) +
theme_bw() +
theme(plot.title=element_text(size=14,face="bold"), # theme_light()
axis.text.y=element_text(size=12),
axis.ticks.y=element_blank(),
axis.text.x=element_text(size=12, face="bold"),
axis.title=element_text(size=12,face="bold"),
plot.caption = element_text(size=12),
strip.text.y = element_text(hjust=0,vjust = 1,angle=180,face="bold"),
axis.line = element_line(color = "#3D4852"),
axis.ticks = element_line(color = "#3D4852"),
panel.grid.major.y = element_line(color = "#DAE1E7"),
panel.grid.major.x = element_blank(),
panel.grid.minor.y = element_blank()
)
fig2
library(patchwork)
durationPlots = fig1 + fig2
durationPlots
# ggsave(filename = "Figs/trophy_levels_time.png",width = 8, height = 4.5, dpi = 300, units = "in", device='png')
levBlotab3 = df.20.more %>% filter(utterlen_aligner < 71 & utterlen_target < 71) %>%
dplyr::select(1:8, "numberturns") %>% unique()
library(lme4)
library(emmeans)
library(multcomp)
library(car)
levBlotab3 = levBlotab3 %>% mutate(TeamRE = paste0(Team, School))
a1 = lmer(level_duration ~ trophy + (1|TeamRE), levBlotab3); summary(a1); Anova(a1, type = 2)
a1.emm <- emmeans(a1, ~ trophy)
pairs(a1.emm, adjust = "none")
## same as above, but cleaner and can be used with lmer if desired
# a1 = aov(level_duration ~ trophy, levBlotab3); summary(a1)
# pairwise.t.test(levBlotab3$level_duration, levBlotab3$trophy, p.adj = "bonf")
a2 = lmer(numberturns ~ trophy + (1|TeamRE), levBlotab3); summary(a2); Anova(a2, type = 2)
a2.emm <- emmeans(a2, ~ trophy)
pairs(a2.emm, adjust = "none")
## how many trophies distributed across all levels; how many blocks?
levtab1 = table(levels1$trophy); blotab1 = table(levels1$Block);
## how many trophies distributed across reduced levels; how many blocks?
levtab2 = table(levels2$trophy);  blotab2 = table(levels2$Block);
levtab1; levtab2
blotab1; blotab2
## What levels are dropped, based on TROPHY, when reducing by number of turns?
## how many levels were dropped BY TROPHIES after removing turns with 20 or fewer turns
# levtab1[1]-levtab2[1]; ((levtab1[1]-levtab2[1])/levtab1[1])*100
# levtab1[3]-levtab2[3]; ((levtab1[3]-levtab2[3])/levtab1[3])*100
# levtab1[2]-levtab2[2]; ((levtab1[2]-levtab2[2])/levtab1[2])*100
matA = matrix(c(names(levtab1[1]), levtab1[1], levtab2[1], ((levtab1[1]-levtab2[1])/levtab1[1])*100,
names(levtab1[3]), levtab1[3], levtab2[3], ((levtab1[3]-levtab2[3])/levtab1[3])*100,
names(levtab1[2]), levtab1[2], levtab2[2], ((levtab1[2]-levtab2[2])/levtab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matA) <- c("Trophy", "Original","Retained","% Drop")
matA
## What levels are dropped, based on BLOCK, when reducing by number of turns?
# blotab1[1]-blotab2[1]; ((blotab1[1]-blotab2[1])/blotab1[1])*100
# blotab1[3]-blotab2[3]; ((blotab1[3]-blotab2[3])/blotab1[3])*100
# blotab1[2]-blotab2[2]; ((blotab1[2]-blotab2[2])/blotab1[2])*100
matB = matrix(c("Warmup", blotab1[3], blotab2[3], ((blotab1[3]-blotab2[3])/blotab1[3])*100,
"ExpBlock1", blotab1[1], blotab2[1], ((blotab1[1]-blotab2[1])/blotab1[1])*100,
"ExpBlock2", blotab1[2], blotab2[2], ((blotab1[2]-blotab2[2])/blotab1[2])*100),
ncol=4,byrow=TRUE)
colnames(matB) <- c("Block", "Original","Retained","% Drop")
matB
main.data$trophy = factor(main.data$trophy, levels=c("none", "silver", "gold"))
main.data$Block = factor(main.data$Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))
levels1.agg = main.data %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x1 = xtabs(~trophy + Block, levels1.agg)
x1
levels2.agg = filter(main.data, numberturns >= rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x2 = xtabs(~trophy + Block, levels2.agg)
x2
droplevel = ((x1-x2)/x1)*100; droplevel
droplevel2 = ((x2)/x1)*100; droplevel2
levels2.agg = filter(main.data, numberturns < rmTurns) %>% group_by(Team, School, Block, Level, revisited, trophy) %>%
summarise_if(is.numeric, list(~ mean(., na.rm = TRUE))); x3 = xtabs(~trophy + Block, levels2.agg)
x3
# First, way more levels are attempted from block to block
colSums(x1)
# But this gets equalized out some after removing levels with 20 or less turns
colSums(x2)
# This shows the reduction. Although more levels are dropped from ExpBlock2, not that dramatic
matB
# There is also a good distribution of levels with different performance outcomes
rowSums(x1)
# But this gets reduced quite a bit with 20 or less turns
rowSums(x2)
# This shows the reduction. Many more gold levels are dropped, followed by none levels
matA
x1
t(t(x1)/colSums(x1))
x2
t(t(x2)/colSums(x2))
droplevel = ((x1-x2)/x1)*100; droplevel
levBlotab = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(numberturns)); colnames(levBlotab) <- c("Trophy", "Block", "AvgNumTurns"); levBlotab
lev_duration = main.data %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration)); colnames(lev_duration) <- c("Trophy", "Block", "AvgDuration"); lev_duration
df.20.more = filter(main.data, numberturns >= rmTurns)
levBlotab2 = df.20.more %>% group_by(factor(trophy, levels=c("none", "silver", "gold")), factor(Block, levels=c("Warmup", "ExpBlock1", "ExpBlock2"))) %>% summarise(mean(level_duration), mean(numberturns)); colnames(levBlotab2) <- c("Trophy", "Block", "AvgDuration", "AvgNumTurns"); levBlotab2
# levels1 = df.sl2 %>% select(Team, School, aligner_score) %>% distinct()
# levels2 = df.sl2 %>% select(Team, School, block_manip, Level, revisited, numberturns) %>% distinct()
#
# quantile(levels2$numberturns)
# IQR(levels2$numberturns)
#
# duration = levels2$numberturns
# breaks = seq(5, 200, by=5)
# duration.cut = cut(duration, breaks, right=FALSE)
# duration.freq = table(duration.cut)
# duration.cumfreq = cumsum(duration.freq)
#
# duration.cumrelfreq = duration.cumfreq / nrow(levels2) *100
# duration.cumrelfreq
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
# setwd("/Users/nickduran/Desktop/GitProjects/CPS-ling-align/R_RMD_Analysis/") # CHANGE THIS
PennPOS_keep = read.csv("../Data/ALIGN_Output/PennPOS_keep_T2T.txt", sep="\t")
StanPOS_keep = read.csv("../Data/ALIGN_Output/StanPOS_keep_T2T.txt", sep="\t")
PennPOS_remove = read.csv("../Data/ALIGN_Output/PennPOS_remove_T2T.txt", sep="\t")
StanPOS_remove = read.csv("../Data/ALIGN_Output/StanPOS_remove_T2T.txt", sep="\t")
