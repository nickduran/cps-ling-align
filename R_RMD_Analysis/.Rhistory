knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
PennPOS_keep = read.csv("Data/ALIGN_Output/PennPOS_keep_T2T.txt", sep="\t")
PennPOS_keep = read.csv("./Data/ALIGN_Output/PennPOS_keep_T2T.txt", sep="\t")
PennPOS_keep = read.csv("../Data/ALIGN_Output/PennPOS_keep_T2T.txt", sep="\t")
StanPOS_keep = read.csv("../Data/ALIGN_Output/StanPOS_keep_T2T.txt", sep="\t")
PennPOS_remove = read.csv("../Data/ALIGN_Output/PennPOS_remove_T2T.txt", sep="\t")
StanPOS_remove = read.csv("../Data/ALIGN_Output/StanPOS_remove_T2T.txt", sep="\t")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
PennPOS_keep = read.csv("../Data/ALIGN_Output/PennPOS_keep_T2T.txt", sep="\t")
StanPOS_keep = read.csv("../Data/ALIGN_Output/StanPOS_keep_T2T.txt", sep="\t")
PennPOS_remove = read.csv("../Data/ALIGN_Output/PennPOS_remove_T2T.txt", sep="\t")
StanPOS_remove = read.csv("../Data/ALIGN_Output/StanPOS_remove_T2T.txt", sep="\t")
PennPOS_keep = PennPOS_keep %>% select(condition_info, partner_direction, time, utterance_length1, utterance_length2,
lexical_lem1, lexical_lem2, lexical_lem3, lexical_tok1, lexical_tok2, lexical_tok3,
syntax_penn_lem2, syntax_penn_tok2, syntax_penn_lem3, syntax_penn_tok3,
cosine_semanticL)
StanPOS_keep = StanPOS_keep %>% select(condition_info, partner_direction, time, syntax_stan_lem2, syntax_stan_tok2, syntax_stan_lem3, syntax_stan_tok3)
mergekeep = left_join(PennPOS_keep,StanPOS_keep)
PennPOS_remove = PennPOS_remove %>% select(condition_info, partner_direction, time,
syntax_penn_lem2, syntax_penn_lem3, syntax_penn_tok2, syntax_penn_tok3) %>% rename(syntax_penn_lem2_nodp = syntax_penn_lem2, syntax_penn_lem3_nodp = syntax_penn_lem3, syntax_penn_tok2_nodp = syntax_penn_tok2, syntax_penn_tok3_nodp = syntax_penn_tok3)
StanPOS_remove = StanPOS_remove %>% select(condition_info, partner_direction, time,
syntax_stan_lem2, syntax_stan_lem3, syntax_stan_tok2, syntax_stan_tok3) %>% rename(syntax_stan_lem2_nodp = syntax_stan_lem2, syntax_stan_lem3_nodp = syntax_stan_lem3, syntax_stan_tok2_nodp = syntax_stan_tok2, syntax_stan_tok3_nodp = syntax_stan_tok3)
mergeremove = left_join(PennPOS_remove,StanPOS_remove)
df.merge = left_join(mergekeep,mergeremove)
source("../R_Helper/Step1_helper.R")
df = cleanup(df.merge)
df = df %>% select(Team, School, Block, Concept, Goal, Level, trophy, level_duration, relative_start_time, revisited, speaker_target, aligner_score, aligner_role, utter_order, utterlen_target, utterlen_aligner, semantic, lexical_lem1, lexical_tok1, syntax_penn_lem2_nodp, syntax_penn_tok2_nodp, syntax_stan_lem2_nodp, syntax_stan_tok2_nodp, syntax_penn_lem3_nodp, syntax_penn_tok3_nodp, syntax_stan_lem3_nodp, syntax_stan_tok3_nodp)
df_composite = df %>% rowwise() %>%
mutate(lexical = (lexical_lem1 + lexical_tok1)/2) %>%
mutate(syn2nd = (syntax_penn_lem2_nodp + syntax_penn_tok2_nodp + syntax_stan_lem2_nodp + syntax_stan_tok2_nodp)/4) %>%
mutate(syn3nd = (syntax_penn_lem3_nodp + syntax_penn_tok3_nodp + syntax_stan_lem3_nodp + syntax_stan_tok3_nodp)/4) %>%
mutate(syntax = (syn2nd + syn3nd)/2) %>%
select(-lexical_lem1, -lexical_tok1, -syntax_penn_lem2_nodp, -syntax_penn_tok2_nodp, -syntax_stan_lem2_nodp, -syntax_stan_tok2_nodp, -syntax_penn_lem3_nodp, -syntax_penn_tok3_nodp, -syntax_stan_lem3_nodp, -syntax_stan_tok3_nodp)
pander(head(df_composite[,c(1:6,17:21)]))
pander(names(df_composite))
write.csv(df_composite, "../Data/Step1_PrepareFeatures.csv", row.names=FALSE)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(tidyverse)
library(pander)
# **person.csv contains the following which is most relevant for us**:
#   + see: https://docs.google.com/document/d/1ihz2GNXj3g9yaopu1xGD-7x9CEW9qwwCRkWE98o_9rM/edit#
person = read.csv('../Accompanying_Data/Step2_FilesToIntegrate/person.csv', sep=",")
person = person %>% mutate(School = word(userID, 2, sep="-"), Team = word(userID, 3, sep="-"), participant = word(userID, 4, sep="-")) %>%
select(-userID)
person = person %>% select(c(2, 57, 1, 58, 59, everything()), -school) %>% rename(School_Team = "team")
# let's start with creating the gender classification for each team
gendem = person %>%
group_by(School_Team) %>%
mutate(samegen = ifelse(sum(isFemale) == 3 | sum(isMale) == 3, 1, 0)) %>%
mutate(femdom = ifelse(sum(isFemale) >= 2, 1, 0)) %>%
dplyr::summarize(samegend = mean(samegen), femdomin = mean(femdom)) %>%
ungroup()
# now, let's create a vector of the big five dimensions for each participant within a team and compute the Euclidean distance
# to do this, let's split the userID column to identify each unique participant [might not be necessary at all]
# next, group by team and then create the vector
# next, compute Euclidean between each pair (three pairs in total) and then get the average score
# ok resource for doing this:
# https://cran.r-project.org/web/packages/philentropy/vignettes/Distances.html
rcols = c("extraversion", "agreeableness", "conscientiousness", "stability", "openness")
persDiv = c()
School_Team = c()
for (i in 1:nrow(person)-1) {
if (i > 1 && person$School_Team[i] == person$School_Team[i-1] && person$School_Team[i] == person$School_Team[i+1]) {
matrixbuild = c()
matrixbuild = as.matrix(person[i,rcols])
matrixbuild = rbind(matrixbuild, as.matrix(person[i-1,rcols]))
matrixbuild = rbind(matrixbuild, as.matrix(person[i+1,rcols]))
distPer = mean(stats::dist(matrixbuild, method = "euclidean"))
persDiv = c(persDiv, distPer)
School_Team = c(School_Team, as.character(person$School_Team[i]))
}
}
persDivDF = data.frame(School_Team, persDiv)
persDivDF = persDivDF
individ_measures1 = person %>% select(School_Team, School, Team, participant, PhysicsScorePre, PhysicsScorePost, raceValue, ISWT_collectivism_mean, Lead_ISWT_self_efficacy_mean,
SEP_mean, IMI_PP_interest_enjoyment_mean, IMI_PP_perceived_competance_mean,
IMI_PP_effort_importance_mean, IMI_PP_pressure_tension_mean, IMI_PP_value_usefulness_mean)
# **person_block.csv contains the following which is most relevant for us**:
#   + see: https://docs.google.com/document/d/1ihz2GNXj3g9yaopu1xGD-7x9CEW9qwwCRkWE98o_9rM/edit#
personblock = read.csv('../Accompanying_Data/Step2_FilesToIntegrate/person_block.csv', sep=",")
personblock = personblock %>% mutate(School = word(userID, 2, sep="-"), Team = word(userID, 3, sep="-"), participant = word(userID, 4, sep="-")) %>%
select(-userID)
individ_measures2 = personblock %>% select(c(2, 26, 1, 3, 27, 28, 10, 18, -school)) %>% rename(School_Team = "team") %>% filter(Block == "Transfer") %>% select(-Block)
master1 = left_join(individ_measures1,individ_measures2)
master2 = left_join(master1, persDivDF)
master3 = left_join(master2, gendem)
master3 = master3 %>% select(-School_Team) %>% rename(aligner_score = "participant")
compositeLing_role = read.csv("../Data/Step1_PrepareFeatures.csv", header=TRUE, sep=",")
compositeLing_role =  left_join(compositeLing_role, master3)
write.csv(compositeLing_role, "../Data/Step2_Optional_IndividDiff.csv", row.names=FALSE)
# **CPS facets**
#   Construction of Shared Knowledge
#   Negotiation/Coordination
#   Maintaining Team Function
# **Objective Performance Scores**
#   Prop_Gold_Trophies: proportion of the gold trophies they earned in that block; note the max possible number of trophies varies by EcT vs PoT
#   Prop_Silver_Trophies: proportion of the silver trophies they earned in that block; note the max possible number of trophies varies by EcT vs PoT
#   Prop_Unique_Trophies: proportion of trophies they earned in that block; note the max possible number of trophies varies by EcT vs PoT
## ADD THESE FOR FIRST ANALYSIS WHERE CODES WERE DONE AT THE BLOCK RATHER THAN SPLIT LEVELS
# block_level = personblock %>% select(c(2, 26, 1, 3, 27, 28, COMM, NEG, MAINTAIN, Prop_Gold_Trophies, Prop_Silver_Trophies, Prop_Unique_Trophies, -school)) %>% rename(School_Team = "team") %>% filter(Block != "Transfer")
